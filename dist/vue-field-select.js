!function(I){var g={};function C(l){if(g[l])return g[l].exports;var A=g[l]={i:l,l:!1,exports:{}};return I[l].call(A.exports,A,A.exports,C),A.l=!0,A.exports}C.m=I,C.c=g,C.d=function(I,g,l){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:l})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var l=Object.create(null);if(C.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var A in I)C.d(l,A,function(g){return I[g]}.bind(null,A));return l},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/VueFieldSelect.vue?vue&type=template&id=26415569&xmlns=http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.showSelect\n    ? _c(\"span\", [\n        _c(\n          \"select\",\n          {\n            class: [_vm.clazz, _vm.errorClazz],\n            attrs: { name: _vm.name },\n            on: { change: _vm.onChange }\n          },\n          [\n            _vm.blankForm\n              ? _c(\"option\", { domProps: { value: null } }, [\n                  _vm._v(_vm._s(_vm.field))\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm._l(_vm.values, function(value) {\n              return _c(\n                \"option\",\n                {\n                  key: value[_vm.currentKey],\n                  domProps: {\n                    value: value[_vm.currentKey],\n                    selected: _vm.actualItem\n                      ? _vm.actualItem[_vm.keyField] === value[_vm.currentKey]\n                        ? \"selected\"\n                        : \"\"\n                      : \"\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n            \" +\n                      _vm._s(value[_vm.currentValue]) +\n                      \"\\n          \"\n                  )\n                ]\n              )\n            })\n          ],\n          2\n        ),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"clearfix\" })\n      ])\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n// CONCATENATED MODULE: ./src/VueFieldSelect.vue?vue&type=template&id=26415569&xmlns=http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml&\n\n// CONCATENATED MODULE: ./src/VueFieldSelectLogic.js\n/**\n * Vahid Hedayati 26/11/2019\n *\n * VueFieldSelectLogic centralises all the default properties for:\n *\n * - VueFieldSelect.vue\n * - VueFieldSelectValid.vue\n * ----\n * This now means any future updates for both can be done in this one\n * centralised place. Reducing duplicate changes need in both.\n */\n/* harmony default export */ var VueFieldSelectLogic = ({\n    loadProps(loadValidation) {\n        var p = {\n            keyField: {\n                default: 'id'\n            },\n            valueField: {\n                default: 'name'\n            },\n            remoteKey: {\n                default: ''\n            },\n            remoteValue: {\n                default: ''\n            },\n            values: { type: Array },\n            field: { type: String },\n            actualItem: { default: null },\n            obj: { type: Object },\n            showSelect: { default: true },\n            returnPromise: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            clazz: { default: \"inline form-control form-control-sm\" },\n            name: { default: 'selectField' }\n\n        };\n        if (loadValidation != undefined && loadValidation === true) {\n            p['validation'] = { type: String, required: false, default: \"\" };\n            p['validationErrors'] = { type: Array, default: function () {\n                    return [];\n                } };\n        }\n        return p;\n    },\n    loadComputed(loadValidation) {\n        var p = {\n            currentValue() {\n                return this.remoteValue ? this.remoteValue : this.valueField;\n            },\n            currentKey() {\n                return this.remoteKey ? this.remoteKey : this.keyField;\n            },\n            blankForm() {\n                return (this.actualItem == null || this.actualItem && this.actualItem.hasOwnProperty(this.keyField) && this.actualItem[this.keyField] == '') && this.field != undefined || this.field != '';\n            }\n        };\n        if (loadValidation != undefined && loadValidation === true) {\n            p['errorClazz'] = function () {\n                return this.errors && this.errors.has(this.name) || this.validationErrors.includes(this.name) ? 'is-invalid' : '';\n            };\n        } else {\n            p['errorClazz'] = function () {\n                return this.validationErrors.includes(this.name) ? 'is-invalid' : '';\n            };\n        }\n        return p;\n    },\n    loadMethods() {\n        var p = {\n            updateIncommingValue: function () {\n                if (this.selected) {\n                    if (this.returnPromise) {\n                        this.$emit('return-promise', this.selected);\n                    } else {\n                        //This fixed v-model of field select\n                        var vmodel = this.actualItem;\n                        vmodel[this.valueField] = this.selected[this.valueField];\n                        vmodel[this.keyField] = this.selected[this.keyField];\n                        this.$emit('input', vmodel);\n\n                        this.$emit('id-sent', this.selected[this.valueField]);\n                        this.$emit('search-value', this.selected[this.keyField]);\n                    }\n                }\n            },\n            updateValue: function () {\n                if (this.selected) {\n                    if (this.returnPromise) {\n                        this.$emit('return-promise', this.selected);\n                    } else {\n                        var vmodel = this.actualItem;\n                        vmodel[this.valueField] = this.selected[this.currentValue];\n                        vmodel[this.keyField] = this.selected[this.currentKey];\n                        this.$emit('input', vmodel);\n                        this.$emit('id-sent', this.selected[this.currentKey]);\n                        this.$emit('search-value', this.selected[this.currentValue]);\n                    }\n                } else {\n                    var vmodel = this.actualItem;\n                    v[this.valueField] = '';\n                    vmodel[this.keyField] = '';\n                    this.$emit('input', vmodel);\n                    this.$emit('id-sent', '');\n                    this.$emit('search-value', '');\n                }\n            },\n            onChange(e) {\n                this.selected = this.values.find(value => value[this.currentKey] === e.target.value || value[this.currentKey] === Number(e.target.value));\n                this.updateValue();\n            }\n        };\n        return p;\n    },\n    loadCreated(loadMounted) {\n        if (loadMounted == undefined || loadMounted === false) {\n            if (this.actualItem != null) {\n                this.updateIncommingValue();\n            }\n        }\n        if (this.defaultValueRequired) {\n            this.selected = this.values[0];\n            if (this.selected) {\n                var vmodel = this.actualItem;\n                vmodel[this.valueField] = this.selected[this.currentValue];\n                vmodel[this.keyField] = this.selected[this.currentKey];\n                this.$emit('input', vmodel);\n                //end of fix\n                this.$emit('id-sent', this.selected[this.currentKey]);\n                this.$emit('search-value', this.selected[this.currentValue]);\n            }\n        }\n        try {\n            if (this.selected && this.actualItem && this.actualItem.hasOwnProperty(this.keyField)) {\n                if (loadMounted != undefined && loadMounted === true) {\n                    if (this.selected[this.valueField]) {\n                        this.$emit('search-value', this.selected[this.valueField]);\n                    } else {\n                        this.selected[this.valueField] = this.values.find(value => value[this.currentKey] === this.actualItem[this.keyField] || value[this.currentKey] === Number(this.actualItem[this.keyField]));\n                        this.$emit('search-value', this.selected[this.valueField]);\n                    }\n                    this.$emit('id-sent', this.actualItem[this.keyField]);\n                } else {\n                    if (this.selected[this.valueField]) {\n                        this.$emit('search-value', this.selected[this.valueField]);\n                    } else {\n                        this.selected[this.valueField] = this.values.find(value => value[this.currentKey] === this.actualItem[this.keyField] || value[this.currentKey] === Number(this.actualItem[this.keyField]));\n                        this.$emit('search-value', this.selected[this.valueField]);\n                    }\n                    this.$emit('id-sent', this.actualItem[this.keyField]);\n                }\n            }\n        } catch (e) {}\n    }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/VueFieldSelect.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var VueFieldSelectvue_type_script_lang_js_ = ({\n    props: VueFieldSelectLogic.loadProps(),\n    computed: VueFieldSelectLogic.loadComputed(),\n    methods: VueFieldSelectLogic.loadMethods(),\n    created: VueFieldSelectLogic.loadCreated(),\n    mounted: VueFieldSelectLogic.loadCreated(true),\n    data: function () {\n        return {\n            activePage: true,\n            defaultValueRequired: this.actualItem == null || this.actualItem && this.actualItem.hasOwnProperty(this.keyField) && this.actualItem[this.keyField] == '' && this.field === undefined,\n            selected: this.actualItem\n        };\n    }\n});\n// CONCATENATED MODULE: ./src/VueFieldSelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_VueFieldSelectvue_type_script_lang_js_ = (VueFieldSelectvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n// CONCATENATED MODULE: ./src/VueFieldSelect.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = normalizeComponent(\n  src_VueFieldSelectvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/VueFieldSelect.vue\"\n/* harmony default export */ var VueFieldSelect = (component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/VueFieldSelectValid.vue?vue&type=template&id=2f047c43&xmlns=http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml&\nvar VueFieldSelectValidvue_type_template_id_2f047c43_xmlns_http_3A_2F_2Fwww_w3_org_2F1999_2Fxhtml_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.showSelect\n    ? _c(\"span\", [\n        _c(\n          \"select\",\n          {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: _vm.validation,\n                expression: \"validation\"\n              }\n            ],\n            class: [_vm.clazz, _vm.errorClazz],\n            attrs: { name: _vm.name },\n            on: { change: _vm.onChange }\n          },\n          [\n            _vm.blankForm\n              ? _c(\"option\", { domProps: { value: null } }, [\n                  _vm._v(_vm._s(_vm.field))\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm._l(_vm.values, function(value) {\n              return _c(\n                \"option\",\n                {\n                  key: value[_vm.currentKey],\n                  domProps: {\n                    value: value[_vm.currentKey],\n                    selected: _vm.actualItem\n                      ? _vm.actualItem[_vm.keyField] === value[_vm.currentKey]\n                        ? \"selected\"\n                        : \"\"\n                      : \"\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n            \" +\n                      _vm._s(value[_vm.currentValue]) +\n                      \"\\n          \"\n                  )\n                ]\n              )\n            })\n          ],\n          2\n        ),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.errors.has(_vm.name),\n                expression: \"errors.has(name)\"\n              }\n            ],\n            staticClass: \"col-sm-12 alert alert-danger\"\n          },\n          [_vm._v(_vm._s(_vm.errors.first(_vm.name)))]\n        ),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"clearfix\" })\n      ])\n    : _vm._e()\n}\nvar VueFieldSelectValidvue_type_template_id_2f047c43_xmlns_http_3A_2F_2Fwww_w3_org_2F1999_2Fxhtml_staticRenderFns = []\nVueFieldSelectValidvue_type_template_id_2f047c43_xmlns_http_3A_2F_2Fwww_w3_org_2F1999_2Fxhtml_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./src/VueFieldSelectValid.vue?vue&type=template&id=2f047c43&xmlns=http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/VueFieldSelectValid.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var VueFieldSelectValidvue_type_script_lang_js_ = ({\n    inject: [\"$validator\"],\n    props: VueFieldSelectLogic.loadProps(true),\n    computed: VueFieldSelectLogic.loadComputed(true),\n    methods: VueFieldSelectLogic.loadMethods(),\n    created: VueFieldSelectLogic.loadCreated(),\n    mounted: VueFieldSelectLogic.loadCreated(true),\n    data: function () {\n        return {\n            activePage: true,\n            defaultValueRequired: this.actualItem == null || this.actualItem && this.actualItem.hasOwnProperty(this.keyField) && this.actualItem[this.keyField] == '' && this.field === undefined,\n            selected: this.actualItem\n        };\n    }\n});\n// CONCATENATED MODULE: ./src/VueFieldSelectValid.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_VueFieldSelectValidvue_type_script_lang_js_ = (VueFieldSelectValidvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./src/VueFieldSelectValid.vue\n\n\n\n\n\n/* normalize component */\n\nvar VueFieldSelectValid_component = normalizeComponent(\n  src_VueFieldSelectValidvue_type_script_lang_js_,\n  VueFieldSelectValidvue_type_template_id_2f047c43_xmlns_http_3A_2F_2Fwww_w3_org_2F1999_2Fxhtml_render,\n  VueFieldSelectValidvue_type_template_id_2f047c43_xmlns_http_3A_2F_2Fwww_w3_org_2F1999_2Fxhtml_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var VueFieldSelectValid_api; }\nVueFieldSelectValid_component.options.__file = \"src/VueFieldSelectValid.vue\"\n/* harmony default export */ var VueFieldSelectValid = (VueFieldSelectValid_component.exports);\n// CONCATENATED MODULE: ./src/main.js\n/* concated harmony reexport VueFieldSelect */__webpack_require__.d(__webpack_exports__, \"VueFieldSelect\", function() { return VueFieldSelect; });\n/* concated harmony reexport VueFieldSelectValid */__webpack_require__.d(__webpack_exports__, \"VueFieldSelectValid\", function() { return VueFieldSelectValid; });\n\n\nwindow.VueFieldSelect = VueFieldSelect;\nwindow.VueFieldSelectValid = VueFieldSelectValid;\n\n/* harmony default export */ var main = __webpack_exports__[\"default\"] = (VueFieldSelect);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);